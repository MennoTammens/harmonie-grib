                             Writing GRIB

A GRIB record or message consists up to six distinct sections.

  Section 0: IS 		Indicator Section
  Section 1: PDS 		Product Definition Section
  Section 2: GDS 		Grid Description Section (1)
  Section 3: BMS 		Bit Map Section (2)
  Section 4: BDS 		Binary Data Section
  Section 5: End 		End Section

(1) Optional but very strongly recommended.
(2) The BMS used to flag undefined values and is not present when
    all the grid values are defined.


To be write grib records using the gribw library, you only need
three parameters,

	(1) the PDS		same as above
	(2) the GDS		same as above
	(3) array of floats	data values

At this point, writing grib is easier than before but still very
difficult as creating the PDS and GDS can be painful.  

     Creating the PDS --> use PDStool
     Creating the GDS --> use GDStool
     Creating the GDS --> use NCEP_GDS() to duplicate a standard NCEP GRID
     Creating the GDS --> use a macros that call GDStool


                              PDStool

PDStool is the nicest part of the gribw library.  With a conventional
subroutine call to create a PDS, you may need a hundred arguments.
This may sound rediculous but the w3lib routine and its KPDS array.
PDStools solves is problem by

    (1) allowing you to create or modify a PDS
    (2) variable number of arguments
    (3) except for the first and last arguments, the order of the
        arguments is immaterial
    (4) subroutine calls is easy to document

examples:

    Change the date of PDS:

	pds = PDStool(pds, P_date(19991225), P_hour(0), P_end);
	(set date code to dec 25, 1999, the following is equivalent)

	pds = PDStool(pds, P_hour(0), P_date(19991225), P_end);
	

    Create a PDS:

        pds = PDStool(New_PDS,              /* new PDS */
            NCEP_opn,                       /* center, subcenter */
            P_param_table(2),               /* parameter table */
            P_process(0),                   /* process that made data */
    
            P_param(ULWRF), P_top_atmos,    /* variable and level */
            P_date(19991225),               /* initial date yyyymmdd */
            P_hour(0),                      /* 00Z */
    
            P_ave_mon(0,1),                 /* averaged from month 0 to 1 */
    
            P_dec_scale(1),                 /* scale numbers by 10**1 */
            P_end);                         /* end of arguments */

Check the tools directory for more examples.



                           Creating a GDS


The GDS, grid definition section, can either be created by (1) using a standard NCEP grid

	unsigned char *pds, *gds;

	... make pds ...

	gds = NCEP_GDS(pds,NCEP_GRID_NUMBER);


You can also make your own grid by using the new_XXXX_GDS() routines.  For
a description and documentation, see gdstool.h.  For example

	gds = new_LatLon_GDS(pds,nlon,nlat,lon1,lat1,lon2,lat2,dlon,dlat)

	gds = new_LatLon_GDS(pds,144,73,0.0,90.0,-2.5,-90.0,2.5,2.5);

The new_XXX_GDS() routines are just calls to the GDS tool routine.


				Data


The data has to be in a float vector with undefined values set to UNDEFINED (9.999e20).
At this point, one needs to decide the precision of the data.  For NCEP-style #1 
(global model) grib, numbers are stored as integers scaled by a power of 10.  To set the 
power of 10, you call,

	set_DecScale(unsigned char *pds, int dec_scale);

For NCEP-style #2 (eta model), numbers are stored as scaled powers of 10 and two.


	set_DecScale(unsigned char *pds, int dec_scale);
	set_def_power2(int scale2);


ECMWF-style grib stores the numbers as a integer times a power of two.  In this style,
one controls the number of bits of precision and the routine sets the power of two.
For example, to set the precision to 12 bit, you call,

	set_BDSMinBits(12);
	set_BDSMaxBits(12);

The ECMWF style is the easiest to use but the NCEP styles allow more fine tuning of the file
size.

Once you have set th precision, write out the grib record by

	wrt_grib_rec(pds, gds, data, ndata, output);




          				That's all folks.
