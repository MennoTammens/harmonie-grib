Preliminary documentation:

GRIBW library:

   Designing an universal API to read and write GRIB files is very
difficult and I concluded that the best way is to have different
APIs or levels.
   Level 0 is the most primitive and requires some knowledge about 
creating the PDS and GDS.  However, it is sufficient for many tasks and 
provides the necessary routines to write gribw level0, the functional 
inverse of wgrib.


gribw level 0a - C interface

   Uses undecoded sections: pds, gds, bms, bds

       Reading GRIB
           len_grib = rd_grib_msg(input, pos, &pds, &gds, &bms, &bds);
       Writing GRIB
	   (void) wrt_grib_msg(output, pds, gds, bms, bds);

       (status: long-term use)

gribw level 0b - C interface

   Uses binary data, undecoded sections: pds, gds

   C interface:
       Reading GRIB
           len_grib = rd_grib_rec(input, pos, &pds, &gds, &data, &ndata);

		The memory used to store pds[], gds[] and data[] 
		gets recycled by each call to rd_grib_rec and 
                rd_grib_msg.  You must save the data if you plan
		to keep it.

       Writing GRIB
           (void) wrt_grib_rec(pds, gds, data, ndata, output);

		note: data[] is overwritten

       (status: development/testing)

gribw level 0c - "universal" Fortran interface

    Uses binary data, undecoded sections: pds, gds to write to 2 files
    Uses external program, gribw, to create grib file

    Fortran interface:
       Reading GRIB
          [wgrib is used to create binary file]
          read(iunit) array
       Writing GRIB
          call wrtpds(pds,npds,gds,ngds,iunit1)
          write(iunit2) snow1
          ..
          [gribw is run afterwards to generate the GRIB file]


gribw level 0d - compiler-dependent Fortran interface

    Currently not under consideration.

     
gribw0: level 0 - utility

   Reads files of binary data, pds and gds to create a grib file.

       (status: testing)

---------------------------------------------------------------------------

gribw level 1 adds:

   tools to create and alter the PDS and GDS

      pds = pds_tool(NULL,P_CENTER(7,0),P_PARAM(7),
         P_PROCESS(62),P_MB(500), P_ANALYSIS(), P_end);
      pds = pds_tool(pds,P_DATE(1996123106))

      Except for the first parameter, the order and number of
      parameters is arbitrary.

        (status: development/testing)

      gds = NCEP_GDS(pds,2);

        (status: long-term use)

   interactive script to create pds and gds?

   grib reading/writing API: to be determined


---------------------------------------------------------------------------

Misc routines

      cpGRIBsec

      Returns a pointer to copy of a GRIB section.
      This is needed as rd_grib_msg and rd_grib_rec do
      resuse the buffer space.  After the data allocated
      by cpGRIBsec, it should be freed (free(section));

      sec =  (char *) cpGRIBsec((char *)section)


---------------------------------------------------------------------------

Details:

    Precision can handled either by a decimal scaling or setting a
binary precision (e.g., 12 bits).
    Fortran-C interfaces are a pain as they are often system/compiler
dependent.  I plan to use the gribw0 utility for my Fortran needs.
It may be slower than a direct Fortran write but it's fine for my needs.

---------------------------------------------------------------------------
